// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  PENDING
  ACCEPTED
  REJECTED
}

model Post {
  id             String           @id @default(cuid())
  content        String           @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  PostHasComment PostHasComment[]
}

model RecyclingRequest {
  id                String   @id @default(cuid())
  description       String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  material          String
  avgMaterialWeight Decimal
  status            status   @default(PENDING)
}

model PostHasComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  username         String?            @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Post             Post[]
  PostHasComment   PostHasComment[]
  RecyclingRequest RecyclingRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
